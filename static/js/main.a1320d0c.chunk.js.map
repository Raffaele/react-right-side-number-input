{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["RightSideNumberInput","forwardRef","value","onChange","numOfDigits","autofocus","dividerSymbol","valueSymbol","className","style","placeholder","inputRef","useRef","isInitialValueUndefined","useState","getInnerValue","innerValue","setInnerValue","dividerFactor","useMemo","useImperativeHandle","mainRef","focus","useEffect","isCurrentValueUndefined","Error","displayValue","innerClassName","styles","key","Math","chechInitialValues","type","inputMode","autoFocus","ref","onKeyUp","newInnerValue","evt","target","handleChange","data-testid","PropTypes","string","App","setValue","copiedValue","setCopiedValue","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"ueAWaA,EAAuBC,sBAClC,cAaK,IAXDC,EAWC,EAXDA,MACAC,EAUC,EAVDA,SAUC,IATDC,mBASC,MATa,EASb,MARDC,iBAQC,aAPDC,qBAOC,MAPe,IAOf,MANDC,mBAMC,MANa,GAMb,MALDC,iBAKC,MALW,GAKX,MAJDC,aAIC,MAJO,GAIP,MAHDC,mBAGC,MAHa,GAGb,EACGC,EAAWC,mBACVC,EAA2BC,wBAAlC,IAA2CZ,GAA3C,GACA,EAAoCY,mBAASC,MAA7C,GAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAgBC,mBAAQ,WAC5B,wBACC,CAFH,IAIAC,8BAAoBC,GAAS,iBAAO,CAClCC,MAAO,WACLX,mBAEFT,MAAOc,MAGTO,qBAAU,WACR,IAAMC,OAAN,IAAgCtB,EAChC,GAAIsB,IAAJ,EACE,MAAM,IAAIC,MAAV,IAEF,IAAKD,GAAL,EACE,MAAM,IAAIC,MAAV,IAEF,GACER,OAED,CAACf,EAXJqB,IAaA,IAAMG,EAAeP,mBAAQ,WAC3B,OACEZ,EACAS,yBAFF,KAIC,CALH,IAOMW,EAAiBR,mBAAQ,WAC7B,MAAO,CAACX,EAAWoB,EAAZ,4BAAP,OACC,CAFH,IAIA,gBACE,oBAAIC,EACKC,WAAYd,EAAD,EAAXc,IAAP,EAEED,MAAYA,GAAhB,IAEMA,EAAMC,WAAWZ,IAAnB,KADF,EAIF,EAqBF,OAPA,WAEE,QADA,IAA4Bf,EAC5B,EACE,MAAM,IAAIsB,MAAV,IALJM,GAUE,2BACEC,KADF,OAEEC,UAFF,UAGEzB,UAHF,EAIE0B,UAJF,EAKEC,IALF,EAMEC,QAAS,mBAzBb,YACE,IAAMC,EAAgBtB,EAAcC,EAAYsB,EAAhD,KACA,EACErB,KAGFd,EAAS,CAACoC,OAAQ,EAAF,UAAMlB,QAAN,IAAMA,OAAN,EAAMA,EAAN,SAAwBnB,MAAOmC,MAmB3BG,CAAT,IACTrC,SAAU,aACVD,MARF,EASEO,MATF,EAUEC,YAVF,EAWE+B,cAAY,kBAMpBzC,YAAiC,CAC/BE,MAAOwC,IADwB,OAE/BvC,SAAUuC,IAFqB,KAG/BtC,YAAasC,IAHkB,OAI/BrC,UAAWqC,IAJoB,KAK/BpC,cAAeoC,IALgB,OAM/BnC,YAAamC,IANkB,OAO/BlC,UAAWkC,IAPoB,OAQ/BjC,MAAOiC,IARwB,OAS/BhC,YAAagC,IAAUC,Q,UCnFVC,EAhCH,WACV,IAAMT,EAAMvB,mBACZ,EAA0BE,mBAAS,GAAnC,mBAAOZ,EAAP,KAAc2C,EAAd,KACA,EAAsC/B,mBAAS,GAA/C,mBAAOgC,EAAP,KAAoBC,EAApB,KAaA,OAAO,6BACL,kCACE,4CACA,kBAAC/C,EAAD,CAAsBmC,IAAKA,EAAK7B,cAAc,IAAIC,YAAY,SAC9D,4BAAQyC,QAhBZ,WACED,EAAeZ,EAAIc,QAAQ/C,SAezB,iBACA,4BAAQ8C,QATZ,WACEb,EAAIc,QAAQ3B,UAQV,SACA,6BAAMwB,IAER,kCACE,6CACA,kBAAC9C,EAAD,CAAsBO,YAAY,IAAIF,WAAS,EAACD,YAAa,EAAGF,MAAOA,EAAOC,SAlBlF,SAAsBmC,GACpBO,EAASP,EAAIC,OAAOrC,UAkBlB,uCAAaA,MC3BnBgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a1320d0c.chunk.js","sourcesContent":["import React, {\n  useImperativeHandle,\n  forwardRef,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n} from 'react'\nimport styles from './styles.module.css'\nimport PropTypes from 'prop-types'\n\nexport const RightSideNumberInput = forwardRef(\n  (\n    {\n      value,\n      onChange,\n      numOfDigits = 2,\n      autofocus = false,\n      dividerSymbol = '.',\n      valueSymbol = '',\n      className = '',\n      style = {},\n      placeholder = '',\n    },\n    mainRef\n  ) => {\n    const inputRef = useRef()\n    const [isInitialValueUndefined] = useState(value === undefined)\n    const [innerValue, setInnerValue] = useState(getInnerValue(value) || 0)\n    const dividerFactor = useMemo(() => {\n      return 10 ** numOfDigits\n    }, [numOfDigits])\n\n    useImperativeHandle(mainRef, () => ({\n      focus: () => {\n        inputRef.current.focus()\n      },\n      value: innerValue,\n    }))\n\n    useEffect(() => {\n      const isCurrentValueUndefined = value === undefined\n      if (isCurrentValueUndefined && !isInitialValueUndefined) {\n        throw new Error('')\n      }\n      if (!isCurrentValueUndefined && isInitialValueUndefined) {\n        throw new Error('')\n      }\n      if (!isCurrentValueUndefined) {\n        setInnerValue(value)\n      }\n    }, [value, isInitialValueUndefined])\n\n    const displayValue = useMemo(() => {\n      return (\n        valueSymbol +\n        innerValue.toFixed(numOfDigits).replace('.', dividerSymbol)\n      )\n    }, [innerValue])\n\n    const innerClassName = useMemo(() => {\n      return [className, styles.input].filter(Boolean).join(' ')\n    }, [className])\n\n    function getInnerValue(initialValue, key) {\n      if (key === 'Backspace') {\n        return Math.trunc((innerValue * dividerFactor) / 10) / dividerFactor\n      }\n      if (key >= 0 && key <= 9) {\n        return (\n          (+key + Math.round(dividerFactor * innerValue * 10)) / dividerFactor\n        )\n      }\n      return initialValue\n    }\n\n    function handleChange(evt) {\n      const newInnerValue = getInnerValue(innerValue, evt.key)\n      if (isInitialValueUndefined) {\n        setInnerValue(newInnerValue)\n        return\n      }\n      onChange({target: {...mainRef?.current, value: newInnerValue}})\n    }\n\n    chechInitialValues()\n\n    function chechInitialValues() {\n      const isOnChangeUndefined = onChange === undefined\n      if (isOnChangeUndefined ^ isInitialValueUndefined) {\n        throw new Error('')\n      }\n    }\n\n    return (\n      <input\n        type=\"text\"\n        inputMode=\"numeric\"\n        className={innerClassName}\n        autoFocus={autofocus}\n        ref={inputRef}\n        onKeyUp={(ect) => handleChange(ect)}\n        onChange={() => {}}\n        value={displayValue}\n        style={style}\n        placeholder={placeholder}\n        data-testid=\"main-input\"\n      />\n    )\n  }\n)\n\nRightSideNumberInput.propTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func,\n  numOfDigits: PropTypes.number,\n  autofocus: PropTypes.bool,\n  dividerSymbol: PropTypes.string,\n  valueSymbol: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  placeholder: PropTypes.string,\n}\n","import React from 'react'\n\nimport { RightSideNumberInput } from 'react-right-side-number-input'\nimport 'react-right-side-number-input/dist/index.css'\nimport { useRef, useState } from 'react';\n\nconst App = () => {\n  const ref = useRef();\n  const [value, setValue] = useState(0);\n  const [copiedValue, setCopiedValue] = useState(0);\n  function showResult() {\n    setCopiedValue(ref.current.value);\n  }\n\n  function handleChange(evt) {\n    setValue(evt.target.value);\n  }\n\n  function focusInput() {\n    ref.current.focus();\n  }\n\n  return <div>\n    <fieldset>\n      <legend>With ref</legend>\n      <RightSideNumberInput ref={ref} dividerSymbol=\",\" valueSymbol=\"Â£\" />\n      <button onClick={showResult}>update result</button>\n      <button onClick={focusInput}>focus</button>\n      <div>{copiedValue}</div>\n    </fieldset>\n    <fieldset>\n      <legend>autofocus</legend>\n      <RightSideNumberInput valueSymbol=\"$\" autofocus numOfDigits={4} value={value} onChange={handleChange} />\n      <div>value: {value}</div>\n    </fieldset>\n  </div>;\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}